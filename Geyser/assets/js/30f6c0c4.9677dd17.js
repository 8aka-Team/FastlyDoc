(self.webpackChunkgeyser_wiki=self.webpackChunkgeyser_wiki||[]).push([[2026],{34891:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(o(96540)),i=n(o(4213));t.default=function(e){let{url:t,proxy:o}=e;return a.default.createElement("div",{style:{float:"right"},className:"dropdown dropdown--hoverable dropdown--right"},a.default.createElement("button",{className:"export-button button button--sm button--secondary"},"Export"),a.default.createElement("ul",{className:"export-dropdown dropdown__menu"},a.default.createElement("li",null,a.default.createElement("a",{onClick:e=>{e.preventDefault(),(e=>{let t;(e.endsWith("json")||e.endsWith("yaml")||e.endsWith("yml"))&&(t=e.substring(e.lastIndexOf("/")+1)),i.default.saveAs(e,t||"openapi.txt")})(`${t}`)},className:"dropdown__link",href:`${t}`},"OpenAPI Spec"))))}},59292:function(e,t,o){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(o(96540)),i=o(7449),r=n(o(41306)),l=n(o(31727));t.default=function(e){const{colorMode:t}=(0,i.useColorMode)(),{logo:o,darkLogo:n}=e,s=()=>"dark"===t?n?.altText??o?.altText:o?.altText,d=(0,r.default)(o?.url),c=(0,r.default)(n?.url);return o&&n?a.default.createElement(l.default,{alt:s(),sources:{light:d,dark:c},className:"openapi__logo"}):o||n?a.default.createElement(l.default,{alt:s(),sources:{light:d??c,dark:d??c},className:"openapi__logo"}):void 0}},43141:(e,t,o)=>{"use strict";o.r(t),o.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>l,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"api/api.geysermc.org/global-api","title":"Global Api","description":"","source":"@site/wiki/api/api.geysermc.org/global-api.info.mdx","sourceDirName":"api/api.geysermc.org","slug":"/api/api.geysermc.org/global-api","permalink":"/wiki/api/api.geysermc.org/global-api","draft":false,"unlisted":false,"editUrl":null,"tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"id":"global-api","title":"Global Api","description":"","sidebar_label":"Introduction","sidebar_position":0,"hide_title":true,"custom_edit_url":null},"sidebar":"apiSidebar","previous":{"title":"api.geysermc.org","permalink":"/wiki/api/global"},"next":{"title":"Simple server online check","permalink":"/wiki/api/api.geysermc.org/global-api-web-api-health-controller-health"}}');var a=o(74848),i=o(28453),r=(o(59292),o(72128));o(22218),o(56778),o(34891);const l={id:"global-api",title:"Global Api",description:"",sidebar_label:"Introduction",sidebar_position:0,hide_title:!0,custom_edit_url:null},s=void 0,d={},c=[];function u(e){const t={a:"a",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("span",{className:"theme-doc-version-badge badge badge--secondary",children:"Version: 1.0.2"}),"\n",(0,a.jsx)(r.default,{as:"h1",className:"openapi__heading",children:"Global Api"}),"\n",(0,a.jsxs)(t.p,{children:["The Global API is available for every server. It currently includes: ",(0,a.jsx)(t.a,{href:"/wiki/floodgate/linking/#what-is-global-linking",children:"Global Linking"}),", ",(0,a.jsx)(t.a,{href:"/wiki/floodgate/features/#what-is-skin-uploading",children:"skin uploading"}),", getting a xuid by gamertag, and getting a gamertag by xuid.\nWe don't store anything else than you can access by the Global API, except for some non-identifiable metrics. The source code of the Global API is available ",(0,a.jsx)(t.a,{href:"https://github.com/GeyserMC/global_api",children:"here"})," and the source code of the Global Linking server is available ",(0,a.jsx)(t.a,{href:"https://github.com/GeyserMC/GlobalLinkServer",children:"here"}),"."]}),"\n",(0,a.jsx)(t.p,{children:"As a user of the API, you can get various info about Geyser (or specifically, Floodgate players) that joined any Geyser + Floodgate server before. This includes:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["Conversion methods from a Bedrock gamertag to Bedrock xuid, and vice-versa. Only provides info for players who are in Geyser's cache.",(0,a.jsx)("br",{}),"\nIf you need them for all players, you can use a third-party API, e.g. ",(0,a.jsx)(t.a,{href:"https://mcprofile.io/endpoints",children:"https://mcprofile.io/endpoints"}),", which also provides info from the Geyser Global API."]}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsx)(t.p,{children:'Skin info: Whenever a Bedrock player joins via Floodgate, their skin gets converted & uploaded to mineskin. If you want to grab that converted skin, use the xuid of the Bedrock player in this endpoint to get a texture id, or a base64 encoded "value", which you could use directly in e.g. player heads.'}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},4213:function(e,t,o){var n,a,i,r=o(96763);a=[],void 0===(i="function"==typeof(n=function(){"use strict";function t(e,t){return void 0===t?t={autoBom:!1}:"object"!=typeof t&&(r.warn("Deprecated: Expected third argument to be a object"),t={autoBom:!t}),t.autoBom&&/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type)?new Blob(["\ufeff",e],{type:e.type}):e}function n(e,t,o){var n=new XMLHttpRequest;n.open("GET",e),n.responseType="blob",n.onload=function(){d(n.response,t,o)},n.onerror=function(){r.error("could not download file")},n.send()}function a(e){var t=new XMLHttpRequest;t.open("HEAD",e,!1);try{t.send()}catch(e){}return 200<=t.status&&299>=t.status}function i(e){try{e.dispatchEvent(new MouseEvent("click"))}catch(n){var t=document.createEvent("MouseEvents");t.initMouseEvent("click",!0,!0,window,0,0,0,80,20,!1,!1,!1,!1,0,null),e.dispatchEvent(t)}}var l="object"==typeof window&&window.window===window?window:"object"==typeof self&&self.self===self?self:"object"==typeof o.g&&o.g.global===o.g?o.g:void 0,s=l.navigator&&/Macintosh/.test(navigator.userAgent)&&/AppleWebKit/.test(navigator.userAgent)&&!/Safari/.test(navigator.userAgent),d=l.saveAs||("object"!=typeof window||window!==l?function(){}:"download"in HTMLAnchorElement.prototype&&!s?function(e,t,o){var r=l.URL||l.webkitURL,s=document.createElement("a");t=t||e.name||"download",s.download=t,s.rel="noopener","string"==typeof e?(s.href=e,s.origin===location.origin?i(s):a(s.href)?n(e,t,o):i(s,s.target="_blank")):(s.href=r.createObjectURL(e),setTimeout((function(){r.revokeObjectURL(s.href)}),4e4),setTimeout((function(){i(s)}),0))}:"msSaveOrOpenBlob"in navigator?function(e,o,r){if(o=o||e.name||"download","string"!=typeof e)navigator.msSaveOrOpenBlob(t(e,r),o);else if(a(e))n(e,o,r);else{var l=document.createElement("a");l.href=e,l.target="_blank",setTimeout((function(){i(l)}))}}:function(e,t,o,a){if((a=a||open("","_blank"))&&(a.document.title=a.document.body.innerText="downloading..."),"string"==typeof e)return n(e,t,o);var i="application/octet-stream"===e.type,r=/constructor/i.test(l.HTMLElement)||l.safari,d=/CriOS\/[\d]+/.test(navigator.userAgent);if((d||i&&r||s)&&"undefined"!=typeof FileReader){var c=new FileReader;c.onloadend=function(){var e=c.result;e=d?e:e.replace(/^data:[^;]*;/,"data:attachment/file;"),a?a.location.href=e:location=e,a=null},c.readAsDataURL(e)}else{var u=l.URL||l.webkitURL,p=u.createObjectURL(e);a?a.location=p:location.href=p,a=null,setTimeout((function(){u.revokeObjectURL(p)}),4e4)}});l.saveAs=d.saveAs=d,e.exports=d})?n.apply(t,a):n)||(e.exports=i)}}]);