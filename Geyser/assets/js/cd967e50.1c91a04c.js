"use strict";(self.webpackChunkgeyser_wiki=self.webpackChunkgeyser_wiki||[]).push([[3764],{41079:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"geyser/events","title":"Geyser Events","description":"Geyser has a powerful event system that allows you to listen to events that are sent by Geyser. Events are at the heart of Geyser Extensions, and can be used by plugins and mods as well.","source":"@site/wiki/geyser/events.md","sourceDirName":"geyser","slug":"/geyser/events","permalink":"/wiki/geyser/events","draft":false,"unlisted":false,"editUrl":"https://github.com/GeyserMC/GeyserWebsite/tree/master/wiki/geyser/events.md","tags":[],"version":"current","frontMatter":{"title":"Geyser Events","description":"Geyser has a powerful event system that allows you to listen to events that are sent by Geyser. Events are at the heart of Geyser Extensions, and can be used by plugins and mods as well."},"sidebar":"geyserSidebar","previous":{"title":"Getting Started with the API","permalink":"/wiki/geyser/getting-started-with-the-api"},"next":{"title":"Forms and Cumulus","permalink":"/wiki/geyser/forms"}}');var r=t(74848),i=t(28453);const a={title:"Geyser Events",description:"Geyser has a powerful event system that allows you to listen to events that are sent by Geyser. Events are at the heart of Geyser Extensions, and can be used by plugins and mods as well."},o="Geyser Events",l={},c=[{value:"Event Categories",id:"event-categories",level:2},{value:"Usage Examples:",id:"usage-examples",level:2},{value:"Event Priority",id:"event-priority",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"geyser-events",children:"Geyser Events"})}),"\n",(0,r.jsx)(n.p,{children:"Geyser has a powerful event system that allows you to listen to events that are sent by Geyser. Events are at the heart of Geyser Extensions, and can be used by plugins and mods as well."}),"\n",(0,r.jsxs)(n.p,{children:["Full documentation can be found ",(0,r.jsx)(n.a,{href:"https://github.com/GeyserMC/Geyser/tree/master/api/src/main/java/org/geysermc/geyser/api/event",children:"here"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"event-categories",children:"Event Categories"}),"\n",(0,r.jsx)(n.p,{children:"To use events in a Spigot/Paper plugin or a Fabric mod, you need to register the Geyser Event Bus as a listener and then subscribe to the events you want to listen to.\nExtensions can use the @Subscribe annotation."}),"\n",(0,r.jsx)(n.p,{children:"Events are categorized into the following categories:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/GeyserMC/Geyser/tree/master/api/src/main/java/org/geysermc/geyser/api/event/bedrock",children:"Bedrock"}),": Events that are sent for each connecting Bedrock client,\nfor example the ClientEmoteEvent that is sent when a Bedrock player uses an emote - or the SessionLoginEvent that is sent when a Bedrock player logged in and is about to join a server."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/GeyserMC/Geyser/tree/master/api/src/main/java/org/geysermc/geyser/api/event/java",children:"Java"}),": Events that are sent for the java server, for example\nthe ServerDefineCommandsEvent - it is fired when the Java sends the commands to show for Bedrock players."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/GeyserMC/Geyser/tree/master/api/src/main/java/org/geysermc/geyser/api/event/connection",children:"Connection"}),": Connection-related events, such as a ping event to return e.g. a custom MOTD."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/GeyserMC/Geyser/tree/master/api/src/main/java/org/geysermc/geyser/api/event/lifecycle",children:"Lifecycle"}),": Events that are sent during Geyser's lifecycle, such as the loading of custom items, resource packs, or Geyser commands."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"To see all the events in the respective categories, click on the links above."}),"\n",(0,r.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples:"}),"\n",(0,r.jsx)(n.p,{children:"Each method that you want to subscribe to an event needs to be annotated with the @Subscribe annotation (from the GeyserMC events package)."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'@Subscribe\npublic void onGeyserLoadResourcePacksEvent(GeyserLoadResourcePacksEvent event) {\n    logger().info("Loading: " + event.resourcePacks().size() + " resource packs.");\n    // you could add a resource pack with event.resourcePacks().add(path-to-pack)\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["If you wish to listen to events in a Spigot/Paper plugin or a Fabric mod, you need to register the Geyser Event Bus as a listener first. Just make sure you implement ",(0,r.jsx)(n.code,{children:"EventRegistrar"})," in the main class of your mod or plugin.\nExtensions do not need to do that - they are automatically registered, so a simple @Subscribe annotation is enough."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Paper/Spigot plugin example:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"In your plugin.yml, add the following lines:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'  depend: ["Geyser-Spigot"]\n'})}),"\n",(0,r.jsx)(n.p,{children:"This ensures that your plugin loads after Geyser has, so the Geyser API would be available."}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsx)(n.li,{children:"In your main class, implement the EventRegistrar interface and register the event bus in the onEnable method:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class ExamplePlugin extends JavaPlugin implements EventRegistrar {\n    \n    @Override\n    public void onEnable(){\n        getLogger().info("Registering Geyser event bus!");\n        GeyserApi.api().eventBus().register(this, this); // register your plugin & this class instance as a listener\n    }\n\n    // here an event, we subscribe as usual with the @Subscribe annotation\n    @Subscribe\n    public void onGeyserPostInitializeEvent(GeyserPostInitializeEvent event) {\n        getLogger().info("Geyser started!");\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"If you want to provide your event with a consumer, rather than annotating it, you can also manually subscribe your method to the event bus:"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"// add this after you register your event registrar in onEnable\nGeyserApi.api().eventBus().subscribe(this, GeyserPostInitializeEvent.class, this::onGeyserPostInitializeEvent);\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Fabric mod example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public class ExampleMod implements ModInitializer, EventRegistrar {\n    public static final Logger LOGGER = LoggerFactory.getLogger("modid");\n    \n    @Override \n    public void onInitialize() {\n        ServerLifecycleEvents.SERVER_STARTING.register((server) -> {\n            GeyserApi.api().eventBus().register(this, this); // register your mod & this class instance as a listener\n        });\n        \n        LOGGER.info("Geyser is cool!");\n    }\n    \n    // here an event, we subscribe as usual with the @Subscribe annotation\n    @Subscribe \n    public void onGeyserPostInitializeEvent(GeyserPostInitializeEvent event) {\n        LOGGER.info("Geyser started!");\n    }\n}\n'})}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsx)(n.p,{children:"Note: We cannot directly register the event bus in the mod initializer, since the Geyser API would not be loaded yet."})}),"\n",(0,r.jsx)(n.p,{children:"Therefore, we register it in the server starting event provided by the Fabric API."}),"\n",(0,r.jsx)(n.h2,{id:"event-priority",children:"Event Priority"}),"\n",(0,r.jsxs)(n.p,{children:["Events can have a priority, which is used to determine the order in which the listeners are called. The default priority is NORMAL.\nTo (optionally) set the priority of your event listener, you can add the priority to the ",(0,r.jsx)(n.code,{children:"@Subscribe"})," annotation:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"@Subscribe(postOrder = PostOrder.EARLY)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["If you do not specify a priority, the default priority is used. For all available priorities, see\n",(0,r.jsx)(n.a,{href:"https://github.com/GeyserMC/Events/blob/master/src/main/java/org/geysermc/event/PostOrder.java",children:"here"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var s=t(96540);const r={},i=s.createContext(r);function a(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);