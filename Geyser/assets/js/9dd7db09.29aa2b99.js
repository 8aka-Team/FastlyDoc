"use strict";(self.webpackChunkgeyser_wiki=self.webpackChunkgeyser_wiki||[]).push([[4876],{97540:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"geyser/forms","title":"Forms and Cumulus","description":"Cumulus is the Forms API used in Geyser and Floodgate, and is available for use in projects that extend Geyser or Floodgate.","source":"@site/wiki/geyser/forms.md","sourceDirName":"geyser","slug":"/geyser/forms","permalink":"/wiki/geyser/forms","draft":false,"unlisted":false,"editUrl":"https://github.com/GeyserMC/GeyserWebsite/tree/master/wiki/geyser/forms.md","tags":[],"version":"current","frontMatter":{"title":"Forms and Cumulus","description":"Cumulus is the Forms API used in Geyser and Floodgate, and is available for use in projects that extend Geyser or Floodgate."},"sidebar":"geyserSidebar","previous":{"title":"Geyser Events","permalink":"/wiki/geyser/events"},"next":{"title":"Geyser Extensions","permalink":"/wiki/geyser/extensions"}}');var r=t(74848),o=t(28453);const a={title:"Forms and Cumulus",description:"Cumulus is the Forms API used in Geyser and Floodgate, and is available for use in projects that extend Geyser or Floodgate."},i="What is Cumulus?",l={},d=[{value:"ModalForm",id:"modalform",level:2},{value:"SimpleForm",id:"simpleform",level:2},{value:"CustomForm",id:"customform",level:2},{value:"Sending a form",id:"sending-a-form",level:2},{value:"Receiving a response from the client",id:"receiving-a-response-from-the-client",level:2},{value:"Advanced stuff",id:"advanced-stuff",level:2}];function u(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"what-is-cumulus",children:"What is Cumulus?"})}),"\n",(0,r.jsxs)(n.p,{children:["Bedrock Edition has a cool exclusive feature called Forms.",(0,r.jsx)(n.br,{}),"\n","Cumulus is the Forms API that we use in Geyser and Floodgate.",(0,r.jsx)(n.br,{}),"\n","The source code is available ",(0,r.jsx)(n.a,{href:"https://github.com/GeyserMC/Cumulus",children:"here"}),". You can access the Cumulus API through the ",(0,r.jsx)(n.a,{href:"/wiki/floodgate/api/",children:"Floodgate API"}),", or the ",(0,r.jsx)(n.a,{href:"/wiki/geyser/api",children:"Geyser API"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"Bedrock knows three types of Forms:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"ModalForm"}),"\n",(0,r.jsx)(n.li,{children:"SimpleForm"}),"\n",(0,r.jsx)(n.li,{children:"CustomForm"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["We'll discuss them one by one starting with the easiest and ending with the least easy form type.",(0,r.jsx)(n.br,{}),"\n","After that, you get an overview of every single component.",(0,r.jsx)(n.br,{}),"\n","Then we'll talk about sending the form, receiving a response and doing advanced stuff."]}),"\n",(0,r.jsx)(n.h2,{id:"modalform",children:"ModalForm"}),"\n",(0,r.jsxs)(n.p,{children:["While this is the easiest form type it's also the least customisable.",(0,r.jsx)(n.br,{}),"\n","You have a title, description (content) and two buttons."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://i.imgur.com/kMpMgOh.png",alt:"Example of a ModalForm"})}),"\n",(0,r.jsx)(n.p,{children:"Code used in the image:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'ModalForm.builder()\n    .title("Title")\n    .content("Content")\n    .button1("Button 1")\n    .button2("Button 2")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"simpleform",children:"SimpleForm"}),"\n",(0,r.jsxs)(n.p,{children:["While this one is less easy than ModalForm is, it also has more customizability.",(0,r.jsx)(n.br,{}),"\n","It's still limited to a title, content and buttons, but these buttons can also have images and do not have a minimum and maximum of two."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://i.imgur.com/3rj2OQ2.png",alt:"Example of a SimpleForm"})}),"\n",(0,r.jsx)(n.p,{children:"Code used in the image:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'SimpleForm.builder()\n    .title("Title")\n    .content("Content")\n    .button("Button without an image")\n    .button("Button with URL image", FormImage.Type.URL, "https://github.com/GeyserMC.png?size=200")\n    .button("Button with path image", FormImage.Type.PATH, "textures/i/glyph_world_template.png")\n'})}),"\n",(0,r.jsx)(n.h2,{id:"customform",children:"CustomForm"}),"\n",(0,r.jsxs)(n.p,{children:["While the CustomForm is the last one on our list (and thus the least easy one), it also has the greatest customizability.",(0,r.jsx)(n.br,{}),"\n","This form exists of a title, content and a list of different components e.g. label, slider and input.",(0,r.jsx)(n.br,{}),"\n","See ",(0,r.jsx)(n.a,{href:"https://github.com/GeyserMC/Cumulus/tree/master/src/main/java/org/geysermc/cumulus/component",children:"Components"})," for more information about every component you can use and in which form type."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://i.imgur.com/zHgxELm.png",alt:"Example of a CustomForm"})}),"\n",(0,r.jsx)(n.p,{children:"Code used in the image:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'CustomForm.builder()\n    .title("Title")\n    .dropdown("Text", "Option 1", "Option 2")\n    .input("Input", "placeholder")\n    .toggle("Toggle")\n    .slider("Text", 0, 10, 1, 5)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"sending-a-form",children:"Sending a form"}),"\n",(0,r.jsxs)(n.p,{children:["After you decided which form type you want to use and finished filling in the actual content, it's time to send the Form to the Bedrock player.",(0,r.jsx)(n.br,{}),"\n","You can do that by calling the API and send a form to the player's UUID and the form:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"FloodgateApi.getInstance().sendForm(uuid, form); // or #sendForm(uuid, formBuilder)\n"})}),"\n",(0,r.jsx)(n.p,{children:"Or you can do it by using the Player's FloodgatePlayer instance:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"FloodgatePlayer player = FloodgateApi.getInstance().getPlayer(uuid);\nplayer.sendForm(form); // or #sendForm(formBuilder)\n"})}),"\n",(0,r.jsx)(n.p,{children:"So you can make and send forms in a pretty compact way by doing something like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'FloodgatePlayer player = FloodgateApi.getInstance().getPlayer(uuid);\n...\nplayer.sendForm(\n    CustomForm.builder()\n        .title("My cool title")\n        .label("10/10 content")\n);\n'})}),"\n",(0,r.jsx)(n.h2,{id:"receiving-a-response-from-the-client",children:"Receiving a response from the client"}),"\n",(0,r.jsxs)(n.p,{children:["It's nice and all that we can send forms to a client, but we also want to be able to get a response from a client and being able to handle them.",(0,r.jsx)(n.br,{}),"\n","We can do that using one (or multiple) result handers. The most used result handlers are: ",(0,r.jsx)(n.code,{children:"validResultHandler(BiConsumer<Form, ValidFormResponseResult> | Consumer<ValidFormResponseResult>)"}),", ",(0,r.jsx)(n.code,{children:"invalidResultHandler"}),", ",(0,r.jsx)(n.code,{children:"closedResultHandler"})," and ",(0,r.jsx)(n.code,{children:"closedOrInvalidResultHandler"}),".",(0,r.jsx)(n.br,{}),"\n","Here follows an example that uses result handlers:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'CustomForm.builder()\n    .title("geyser.auth.login.form.details.title")\n    .label("geyser.auth.login.form.details.desc")\n    .input("geyser.auth.login.form.details.email", "account@geyser.fastly.8aka.cn", "")\n    .input("geyser.auth.login.form.details.pass", "123456", "")\n    .closedOrInvalidResultHandler(() -> buildAndShowLoginDetailsWindow(session))\n    .validResultHandler(response -> session.authenticate(response.next(), response.next())));\n'})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-stuff",children:"Advanced stuff"}),"\n",(0,r.jsxs)(n.p,{children:["The FormBuilder also has support for translating the data used in the builder.",(0,r.jsx)(n.br,{}),"\n","To add a translator, you can use the ",(0,r.jsx)(n.code,{children:"translator(BiFunction<String, String, String>)"})," or the ",(0,r.jsx)(n.code,{children:"translator(BiFunction<String, String, String>, String)"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'ModalForm form = ModalForm.builder()\n    .translator(this::translate, userLanguage)\n    .title("Title")\n    .content("Content")\n    .button1("translate.button1")\n    .button2("translate.button2")\n    .build();\n\npublic String translate(String key, String locale) {\n    // this method will be called for every string, in this case, 4 times:\n    // Title, Content, translate.button1, translate.button2\n    // your own translate logic here\n    // return the value that replaces the key\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Or you can have the translate method directly in the FormBuilder instead of a separate method:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'ModalForm form = ModalForm.builder()\n    .translator((key, unused) -> {\n        // this method will be called for every string, in this case, 4 times:\n        // Title, Content, translate.button1, translate.button2\n        // since this isn\'t a separate method, you don\'t need the locale argument, so it\'s unused.\n        // your own translate logic here\n        // return the value that replaces the key\n    })\n    .title("Title")\n    .content("Content")\n    .button1("translate.button1")\n    .button2("translate.button2")\n    .build();\n'})})]})}function c(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var s=t(96540);const r={},o=s.createContext(r);function a(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);