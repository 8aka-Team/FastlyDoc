import{_ as t,c as a,o as r,af as n}from"./chunks/framework.2x6h2CDZ.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"developer/networking/rcon.md","filePath":"en/developer/networking/rcon.md"}'),o={name:"developer/networking/rcon.md"};function s(i,e,l,d,c,h){return r(),a("div",null,e[0]||(e[0]=[n('<h3 id="rcon" tabindex="-1">RCON <a class="header-anchor" href="#rcon" aria-label="Permalink to &quot;RCON&quot;">​</a></h3><h3 id="what-is-rcon" tabindex="-1">What is RCON <a class="header-anchor" href="#what-is-rcon" aria-label="Permalink to &quot;What is RCON&quot;">​</a></h3><p>RCON (Remote Console) is a protocol designed by Valve to allow administrators to control and manage game servers remotely. It provides a way to execute commands on a server from a different location, such as a phone or a separate computer.</p><h3 id="why-rcon" tabindex="-1">Why RCON <a class="header-anchor" href="#why-rcon" aria-label="Permalink to &quot;Why RCON&quot;">​</a></h3><ul><li><strong>Convenience:</strong> Manage your server from anywhere with an internet connection.</li><li><strong>Flexibility:</strong> Execute commands without needing to be physically present at the server&#39;s location.</li><li><strong>Efficiency:</strong> Automate tasks and streamline server management.</li></ul><h3 id="ssh-vs-rcon" tabindex="-1">SSH vs RCON <a class="header-anchor" href="#ssh-vs-rcon" aria-label="Permalink to &quot;SSH vs RCON&quot;">​</a></h3><p><strong>SSH</strong></p><ul><li>Offers strong encryption to protect data transmitted between the client and server.</li><li>Primarily designed for secure remote login and execution of commands on a remote machine.</li><li>Commonly used for managing Linux/Unix systems, configuring networks, and running scripts.</li><li>Provides a shell-like environment, allowing you to execute various commands and interact with the remote system.</li></ul><p><strong>RCON</strong></p><ul><li>Specifically designed for remote administration of game servers, allowing you to control and manage the server&#39;s settings and operations.</li><li>Typically less secure than SSH, as it often relies on plain text passwords.</li><li>Primarily used by game server administrators to manage game servers.</li><li>Has a limited set of game-specific commands.</li></ul><h3 id="packets" tabindex="-1">Packets <a class="header-anchor" href="#packets" aria-label="Permalink to &quot;Packets&quot;">​</a></h3><p>RCON is a very simple protocol with a few packets. Here&#39;s how an RCON packet looks:</p><table tabindex="0"><thead><tr><th>Field</th><th>Description</th></tr></thead><tbody><tr><td>ID</td><td>Used to indicate whether authentication failed or succeeded</td></tr><tr><td>Type</td><td>Identifies the packet type</td></tr><tr><td>Body</td><td>A message (String), e.g., a command or a password</td></tr></tbody></table><h4 id="serverbound-packets-client→server" tabindex="-1">Serverbound Packets <sub><sub>(Client→Server)</sub></sub> <a class="header-anchor" href="#serverbound-packets-client→server" aria-label="Permalink to &quot;Serverbound Packets &lt;sub&gt;&lt;sub&gt;(Client→Server)&lt;/sub&gt;&lt;/sub&gt;&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Type</th><th>Packet</th></tr></thead><tbody><tr><td>2</td><td>Auth</td></tr><tr><td>3</td><td>ExecCommand</td></tr></tbody></table><h4 id="clientbound-packets-server→client" tabindex="-1">Clientbound Packets <sub><sub>(Server→Client)</sub></sub> <a class="header-anchor" href="#clientbound-packets-server→client" aria-label="Permalink to &quot;Clientbound Packets &lt;sub&gt;&lt;sub&gt;(Server→Client)&lt;/sub&gt;&lt;/sub&gt;&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Type</th><th>Packet</th></tr></thead><tbody><tr><td>2</td><td>AuthResponse</td></tr><tr><td>0</td><td>Output</td></tr></tbody></table><h3 id="how-rcon-works" tabindex="-1">How RCON Works <a class="header-anchor" href="#how-rcon-works" aria-label="Permalink to &quot;How RCON Works&quot;">​</a></h3><ol><li><p><strong>Authentication:</strong></p><ul><li>The RCON client sends an authentication packet with the desired password.</li><li>The server verifies the password and responds with an authentication response packet.</li><li>If successful, the response packet includes the same ID as the one sent by the client. If unsuccessful, the ID is -1.</li></ul></li><li><p><strong>Command Execution:</strong></p><ul><li>The authenticated client can now send command execution packets, with each packet containing the command to be executed.</li><li>The server processes the command and sends back an output packet containing the result or any error messages.</li></ul></li></ol>',19)]))}const p=t(o,[["render",s]]);export{m as __pageData,p as default};
